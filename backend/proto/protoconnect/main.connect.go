// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: main.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto "secretum/proto"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TestName is the fully-qualified name of the Test service.
	TestName = "secretum.proto.Test"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TestTestProcedure is the fully-qualified name of the Test's Test RPC.
	TestTestProcedure = "/secretum.proto.Test/Test"
)

// TestClient is a client for the secretum.proto.Test service.
type TestClient interface {
	Test(context.Context, *connect.Request[proto.Empty]) (*connect.Response[proto.Empty], error)
}

// NewTestClient constructs a client for the secretum.proto.Test service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTestClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TestClient {
	baseURL = strings.TrimRight(baseURL, "/")
	testMethods := proto.File_main_proto.Services().ByName("Test").Methods()
	return &testClient{
		test: connect.NewClient[proto.Empty, proto.Empty](
			httpClient,
			baseURL+TestTestProcedure,
			connect.WithSchema(testMethods.ByName("Test")),
			connect.WithClientOptions(opts...),
		),
	}
}

// testClient implements TestClient.
type testClient struct {
	test *connect.Client[proto.Empty, proto.Empty]
}

// Test calls secretum.proto.Test.Test.
func (c *testClient) Test(ctx context.Context, req *connect.Request[proto.Empty]) (*connect.Response[proto.Empty], error) {
	return c.test.CallUnary(ctx, req)
}

// TestHandler is an implementation of the secretum.proto.Test service.
type TestHandler interface {
	Test(context.Context, *connect.Request[proto.Empty]) (*connect.Response[proto.Empty], error)
}

// NewTestHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTestHandler(svc TestHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	testMethods := proto.File_main_proto.Services().ByName("Test").Methods()
	testTestHandler := connect.NewUnaryHandler(
		TestTestProcedure,
		svc.Test,
		connect.WithSchema(testMethods.ByName("Test")),
		connect.WithHandlerOptions(opts...),
	)
	return "/secretum.proto.Test/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TestTestProcedure:
			testTestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTestHandler returns CodeUnimplemented from all methods.
type UnimplementedTestHandler struct{}

func (UnimplementedTestHandler) Test(context.Context, *connect.Request[proto.Empty]) (*connect.Response[proto.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("secretum.proto.Test.Test is not implemented"))
}
